Infix to Postfix using Stack 
//C
#include <stdio.h>
#include<ctype.h>
#include<string.h>
#define max 5
char stack[max];
int top = -1;

void push(char c){
    if(top<max){
        top++;
        stack[top] = c;
    }
    else printf("Overflow");
}

char pop(){
    if(top != -1){
        char x = stack[top];
        top--;
        return x;
    }
    else return 0;
}

int priority(char x){
    if(x =='(') return 0;
    if(x == '^') return 1;
    if(x == '+' || x == '-' ) return 2;
    if(x == '*' || x == '/') return 3;
    return 0;
}

int main(){
    char x;
    char input[100];
    printf("Enter your Postfix exp");
    gets(input);
    int i;
    for(i = 0; i<strlen(input);i++){
        if(isalpha(input[i])) printf("%c", input[i]); //isalpha is inbuilt funtion to check weather a char is alphabet or not.
            
        else if (input[i] == '(')
            push(input[i]);
        
        else if (input[i] == ')')
            while((x = pop()) != '(') printf("%c ", x);
        
        else{
            while(priority(input[i]) <= priority(stack[top])) printf("%c", pop());
            push(input[i]);
        }
    }
    while(top != -1) printf("%c", pop());
    return 0;
}

// Output
// PS C:\Users\AbdulRahim\Desktop\Data-Stuctures> gcc .\Infixtopostfix.c
// PS C:\Users\AbdulRahim\Desktop\Data-Stuctures> .\a.exe
// Enter your Postfix expA+B-C/E
// AB+CE/-

import java.util.*;
public class InfixtoPostfix
{
    public static int Prec(char ch)
    {
        switch (ch) 
        {
        case '+':
        case '-':
            return 1;
 
        case '*':
        case '/':
            return 2;
 
        case '^':
            return 3;
        }
        return -1;
    }
    public static String infixToPostfix(String exp)
    {
        String result = new String("");
        Deque<Character> stack= new ArrayDeque<Character>();
        for (int i = 0; i < exp.length(); ++i) 
        {
            char c = exp.charAt(i);
            if (Character.isLetterOrDigit(c))
            {
                result += c;
            }
            else if (c == '(')
            {
                stack.push(c);
            }
            else if (c == ')') 
            {
                while (!stack.isEmpty()
                       && stack.peek() != '(') 
                {
                    result += stack.peek();
                    stack.pop();
                }
                stack.pop();
            }
            else 
            {
                while (!stack.isEmpty()&& Prec(c) <= Prec(stack.peek())) 
                {
                    result += stack.peek();
                    stack.pop();
                }
                stack.push(c);
            }
        }
        while (!stack.isEmpty()) 
        {
            if (stack.peek() == '(')
            {
                return "Invalid Expression";
            }
            result += stack.peek();
            stack.pop();
        }
        return result;
    }
    public static void main(String[] args)
    {
        String exp = "a+b*(c^d-e)^(f+g*h)-i";
        System.out.println(infixToPostfix(exp));
    }
}
