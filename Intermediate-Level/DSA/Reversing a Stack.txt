Reversing a Stack with the help of another empty Stack

##reversing a stack with the help of another empty stack using python

L=[]
M=[] ##The Empty stack in which the reversed elements will be stored 

n=int(input("Enter the number of elements you want in your stack: "))##creating the stack L
for x in range (0,n):
    p=int(input("Enter the element: "))
    L.append(p)
print("The stack you created is:")
print(L)
print()

print("Reversing the stack by storing it into another......")
print()

K=L[::-1]

for x in range(0,len(K)):
    M.append(K[x])
print("The reversed stack is:")
print(M)

import java.util.*;
public class ReversingStack
{
public static void transfer(Stack<Integer> s1,Stack<Integer> s2, int n)
{
    for(int i = 0; i < n; i++)
    {
        int temp = s1.peek();
        s1.pop();
        s2.push(temp);
    }
}
static void reverse_stack_by_using_extra_stack(Stack<Integer> s,int n)
{
    Stack<Integer> s2 = new Stack<Integer>();
    for(int i = 0; i < n; i++)
    {
        int x = s.peek();
        s.pop();
        transfer(s, s2, n - i - 1);
        s.push(x);
        transfer(s2, s, n - i - 1);
    }
}
public static void main(String[] args)
{
    int n = 5;
    Stack<Integer> s = new Stack<Integer>();
    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4);
    s.push(5);
    reverse_stack_by_using_extra_stack(s, n);
    for(int i = 0; i < n; i++)
    {
        System.out.print(s.peek() + " ");
        s.pop();
    }
}
}
